// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package queue.actions;

import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import queue.entities.QueueConfiguration;
import queue.factories.QueueThreadFactory;
import queue.factories.QueueThreadPoolFactory;
import queue.helpers.QueueValidator;
import queue.proxies.constants.Constants;
import queue.repositories.QueueRepository;

public class InitializeQueue extends CustomJavaAction<java.lang.Boolean>
{
	private java.lang.String Name;
	private java.lang.Long PoolSize;
	private java.lang.Long Priority;

	public InitializeQueue(IContext context, java.lang.String Name, java.lang.Long PoolSize, java.lang.Long Priority)
	{
		super(context);
		this.Name = Name;
		this.PoolSize = PoolSize;
		this.Priority = Priority;
	}

	@Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		ILogNode logger = Core.getLogger(Constants.getLOGNODE());
		
		QueueValidator queueValidator = new QueueValidator(logger);
		boolean valid = queueValidator.isValid(this.Name, this.PoolSize.intValue(), this.Priority.intValue());
		
		if (valid == false) {
			return false;
		}
		
		QueueConfiguration configuration = new QueueConfiguration(this.Name, this.PoolSize.intValue(), this.Priority.intValue());
		QueueThreadFactory threadFactory = new QueueThreadFactory(configuration);
		QueueThreadPoolFactory threadPoolFactory = new QueueThreadPoolFactory();
		QueueRepository.newQueue(configuration, threadPoolFactory, threadFactory);
		
		logger.info("Queue " + Name + " has been initialized with " + PoolSize + " threads and priority " + Priority + ".");
			
		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "InitializeQueue";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
