// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package queue.actions;

import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import queue.entities.QueueConfiguration;
import queue.factories.QueueThreadFactory;
import queue.factories.QueueThreadPoolFactory;
import queue.helpers.QueueInitializer;
import queue.helpers.QueueValidator;
import queue.proxies.constants.Constants;
import queue.repositories.ConstantsRepository;
import queue.repositories.QueueRepository;
import queue.utilities.CoreUtility;

public class InitializeQueue extends CustomJavaAction<java.lang.Boolean>
{
	private java.lang.String name;
	private java.lang.Long poolSize;
	private java.lang.Long priority;

	public InitializeQueue(IContext context, java.lang.String name, java.lang.Long poolSize, java.lang.Long priority)
	{
		super(context);
		this.name = name;
		this.poolSize = poolSize;
		this.priority = priority;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		ILogNode logger = Core.getLogger(Constants.getLOGNODE());
		
		QueueValidator queueValidator = new QueueValidator(logger);
		QueueRepository queueRepository = QueueRepository.getInstance();
		QueueConfiguration configuration = new QueueConfiguration(this.name, this.poolSize.intValue(), this.priority.intValue());
		QueueThreadFactory threadFactory = new QueueThreadFactory(configuration);
		QueueThreadPoolFactory threadPoolFactory = new QueueThreadPoolFactory();
		QueueInitializer queueInitializer = new QueueInitializer();
		ConstantsRepository constantsRepository = new ConstantsRepository();
		CoreUtility coreUtility = new CoreUtility();
		
		boolean initialized = queueInitializer.initialize(logger, configuration, threadPoolFactory, threadFactory, queueValidator, queueRepository, coreUtility, constantsRepository);
		
		return initialized;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "InitializeQueue";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
